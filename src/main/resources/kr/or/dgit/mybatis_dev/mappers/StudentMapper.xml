<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dgit.mybatis_dev.dao.StudentDao">
	<sql id="selectSql">
		select stud_id, name, email, dob, phone
			from students
	</sql>
	
	<sql id="whereSql">
		<where>
			<if test="studId !=null">
				stud_id=#{studId}
			</if>
		</where>		
	</sql>
	<select id="selectList" parameterType="Student" resultType="Student">
		<include refid="selectSql"></include>
	</select>
	
	<select id="selectOne" parameterType="Student" resultType="Student">
		<include refid="selectSql"/>
		<include refid="whereSql"/>
	</select>
	
		
	<sql id="insertSql">
		insert into students(stud_id, name, email, phone, dob)
			values(#{studId}, #{name}, #{email}, #{phone}, #{dob})
	</sql>
	<insert id="insertStudentWithAPI" parameterType="Student">
		<include refid="insertSql"/>
	</insert>
	
	<insert id="insertStudentAutoInc" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
		<include refid="insertSql"/>
	</insert>
	
	<sql id="updateSql">
		update students set name=#{name}, email=#{email}, phone=#{phone}, dob=#{dob}
	</sql>
	<update id="updateStudentWithAPI" parameterType="Student">
		<include refid="updateSql"/>
		<include refid="whereSql"/>
	</update>
	
	<sql id="deleteSql">
		delete from students
	</sql>
	<delete id="deleteStudentWithAPI" parameterType="int">
		<include refid="deleteSql"/>
		where stud_id=#{studId}
	</delete>
	
	<!-- resultMap -->
	<resultMap id="StudentResult" type="Student">
		<id property="studId" column="stud_id"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="dob" column="dob"/>
	</resultMap>
	
	<select id="selectStudentByAllForResultMap" resultMap="StudentResult">
		<include refid="selectSql"/>
	</select>
	<select id="selectStudentByAllForResultMapWithAPI" resultMap="StudentResult">
		<include refid="selectSql"/>
	</select>
	
	<!-- HashMap -->
	<select id="selectStudentByAllForHashMap" resultType="map">
		<include refid="selectSql"/>
	</select>
	<select id="selectStudentByAllForHashMapWithAPI" resultType="map">
		<include refid="selectSql"/>
	</select>
	
	
	<!-- address추가 -->
	<resultMap type="Student" id="StudentWithAddressResult" extends="StudentResult">
		<result property="address.addrId" column="addr_id"/>
		<result property="address.street" column="street"/>
		<result property="address.city" column="city"/>
		<result property="address.state" column="state"/>
		<result property="address.zip" column="zip"/>
		<result property="address.country" column="country"/>	
	</resultMap>
	
	<sql id="selectJoinAddressSql">
		select stud_id, name, email, phone, a.addr_id, street, city, state,zip, country
			from students s left outer join addresses a on s.addr_id=a.addr_id
	</sql>
	
	<select id="selectStudentByNoForResultMapExtends" parameterType="Student" resultMap="StudentWithAddressResult">
		<include refid="selectJoinAddressSql"/>
		<include refid="whereSql"/>
	</select>
	
	<select id="selectStudentbyNoForResultMapExtendsWithAPI" parameterType="Student" resultMap="StudentWithAddressResult">
		<include refid="selectJoinAddressSql"/>
		<include refid="whereSql"/>
	</select>
	
	
	
	<!-- 내포된 결과매핑(ResultMap)을 사용한 일대일 매핑 -->
	<resultMap type="Student" id="StudentAssociation">
		<association property="address" resultMap="kr.or.dgit.mybatis_dev.dao.AddressDao.AddressResult"/>
	</resultMap>
	
	<select id="selectStudentByNoAssociation" parameterType="Student" resultMap="StudentAssociation">
		<include refid="selectJoinAddressSql"/>
		<include refid="whereSql"/>
	</select>
	<select id="selectStudentByNoAssociationWithAPI" parameterType="Student" resultMap="StudentAssociation">
		<include refid="selectJoinAddressSql"/>
		<include refid="whereSql"/>
	</select>
	
	
	<!-- enum타입 다루기 -->
	<sql id="insertEnumSql">
		insert into students(stud_id, name, email, phone, dob, gender)
			values(#{studId}, #{name}, #{email}, #{phone}, #{dob}, #{gender})
	</sql>
	<insert id="insertEnumStudent" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
		<include refid="insertEnumSql"/>
	</insert>
	<insert id="insertEnumStudentWithAPI" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
		<include refid="insertEnumSql"/>
	</insert>
	
	
	
	
	
	
	
</mapper>